/** The Permission type. */
export declare type Permission = "accesstoken";
/** The Extension type. */
export declare type ExtensionType = "page";
/** Possible events back from the Trimble Connect Web application. */
export declare type ExtensionEvents = "extension.command" | "extension.accessToken" | "extension.userSettingsChanged";
/** The Extension configuration - Manifest json schema. */
export interface ExtensionSetting {
    /**
     * @hidden
     * The Extension identifier */
    id?: string;
    /**
     * @hidden
     * The type of the Extension */
    type?: ExtensionType;
    /** The URL of the Extension */
    url: string;
    /** The title of the Extension */
    title: string;
    /** The icon of the Extension */
    icon?: string;
    /** Short information about the Extension */
    description?: string;
    /**
     * @hidden
     * The URL of the Extension manifest */
    manifestUrl?: string;
    /** Whether the Extension is enabled */
    enabled?: boolean;
    /** Config command which will be passed when config icon is cliked */
    configCommand?: string;
    /**
     * @hidden
     * Is built-in flag */
    builtIn?: boolean;
}
/** Route key for navigating the Trimble Connect Web application to a specific route */
export declare type IRouteKey = "settings-extensions" | "settings-details";
/**
 * The API for operations related to the Trimble Connect Web Extensions.
 */
export interface ExtensionAPI {
    /** Set the extension status.
     *  @param message - The extension status message
     *  @returns The awaitable task
     */
    setStatusMessage(message: string): Promise<boolean>;
    /** Get the current status message of the extension
     *  @returns The awaitable task
     */
    getStatusMessage(): Promise<string>;
    /** Configures the Extension.
     *  @param permission - type of the permssion. For now only accesstoken is available.
     *  @returns The awaitable task
     */
    getPermission(permission: Permission): Promise<string>;
    /** Go to the extension settings page
     *  @returns The awaitable task
     */
    goToSettings(): Promise<boolean>;
    /** Go to the extension settings page
     *  @returns The awaitable task
     */
    goTo(routeKey: IRouteKey): Promise<boolean>;
}
