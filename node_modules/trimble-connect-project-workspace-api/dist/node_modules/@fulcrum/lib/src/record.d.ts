declare type AnyRecord = Record<keyof any, any>;
/**
 * Checks if the properties have changed. Checks arrays for deep equality, otherwise shallow.
 * @param prev The previous properties.
 * @param next The next properties.
 */
export declare function changed<T extends AnyRecord>(prev: T, next: T, ...include: Array<keyof T>): boolean;
/**
 * Removes all properties from an object and returns it.
 * @param obj The object.
 */
export declare function clear<T extends AnyRecord>(obj: T): T;
/**
 * Returns number of keys of an object.
 * @param obj The object.
 */
export declare function count<T extends AnyRecord>(obj: T): number;
/**
 * Returns a shallow clone of the object.
 * @param obj The object to clone.
 * @param modify The properties to modify.
 */
export declare function clone<T extends AnyRecord>(obj: T, ...modify: Array<Partial<T>>): T;
/**
 * Returns a shallow clone of the object without the specified properties.
 * @param obj The object to clone.
 * @param properties The properties to exclude.
 */
export declare function cloneWithout<T>(obj: T, ...properties: Array<keyof T>): T;
/**
 * Returns the difference between two sets, i.e. A / B.
 * @param a The first set.
 * @param b The second set.
 */
export declare function difference<T extends AnyRecord, U extends AnyRecord>(a: T | null | undefined, b: U | null | undefined): Partial<T>;
/**
 * Returns the selected key value pairs from an object.
 * @param obj The object.
 * @param f The selector function.
 */
export declare function filterEntries<T extends object>(obj: T, f: (key: keyof T, value: T[keyof T]) => boolean): Array<{
    key: keyof T;
    value: T[keyof T];
}>;
/**
 * Invokes a function for each key value pair in an object.
 * @param obj The object.
 * @param f The function to invoke.
 */
export declare function foreachEntries<T extends object>(obj: T, f: (key: keyof T, value: T[keyof T]) => void): void;
/**
 * Maps object keys and values to an array.
 * @param obj The source object.
 * @param f The projection function.
 * @returns The mapped array.
 */
export declare function mapEntries<T extends object, R>(obj: T, f: (key: keyof T, value: T[keyof T]) => R): R[];
/**
 * Maps object keys and values to a new object.
 * @param obj The object.
 * @param f The projection function.
 * @returns The new object.
 */
export declare function mapObject<T extends object>(obj: T, f: (key: keyof T, value: T[keyof T]) => any): Record<keyof T, any>;
/**
 * Returns a copy of the object with only the selected properties.
 * @param obj The object.
 * @param keys The keys to pick.
 */
export declare function pick<T extends object, K extends keyof T>(obj: T, ...keys: K[]): Pick<T, K>;
export {};
