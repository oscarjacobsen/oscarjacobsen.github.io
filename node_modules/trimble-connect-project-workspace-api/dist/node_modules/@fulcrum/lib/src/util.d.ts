interface PromiseResult<T> {
    result?: T;
    error?: any;
    status: "fulfilled" | "rejected";
}
/**
 * Returns only text for copied html data
 * @param Copied html text
 * @returns string The plain text
 */
export declare function htmlToText(html: string): string;
/**
 * Replaces all the sub strings that matches the search criteria with the replacement string.
 * @param target The current string.
 * @param search The search string
 * @param replacement The replacement string
 */
export declare function replaceAll(target: string, search: string, replacement: string): string;
/**
 * Adds a new element if the given condition doesn't satisfy otherwise replaces it
 */
export declare function addOrReplace<T>(target: T[], source: T, condition: (e: T, i: number, obj: T[]) => unknown): T[];
/**
 * Groups the elements of array based on given function
 */
export declare function groupBy(target: any[], f: any): any[];
/**
 * Returns the unique elements from the array
 */
export declare function distinct<T>(target: T[], selector?: (src: T) => any): T[];
/**
 * Removes the elements from array which satisfies the given condition
 */
export declare function removeWhere<T>(target: T[], condition: (e: T, i: number, obj: T[]) => unknown): boolean;
/**
 * Removes the elements from array at given index
 */
export declare function removeAt<T>(target: T[], index: number): boolean;
/**
 * Removes the element from the given array
 */
export declare function remove<T>(target: T[], element: T): boolean;
/**
 * Returns a boolean indicating whether the given object is array and it has items.
 * @param target The Array.
 */
export declare function hasItems<T>(target?: T[]): boolean;
/**
 * Helper method for array filter to get unique strings from string array
 * @param f The string.
 * @param i The index.
 * @param s The string array.
 */
export declare function unique(f: string, i: number, s: string[]): boolean;
/**
 * Returns a boolean indicating whether the given maps are same.
 * @param map1 The Map.
 * @param map2 The Map.
 */
export declare function equalMaps<K, V>(map1: Map<K, V>, map2: Map<K, V>): boolean;
/**
 * Calls function for each element of the array.
 * @param target The array.
 * @param func The function that needs to be called on each item
 */
export declare function arrayForEach<T>(target: T | T[], func: (e: T) => void): void;
/**
 * Flattens array a single level deep.
 * @param source The array that needs to be flatten.
 */
export declare function flatten<T>(source: T[][]): T[];
/**
 * Limits the target number with in the given range
 * @param target The target number
 * @param min The minimum number.
 * @param max The maximum number.
 */
export declare function limit(target: number, min: number, max: number): number;
/**
 * Returns after all promises are handled
 * @param array of promises.
 */
export declare function afterAll<T>(promises: Array<Promise<T>>): Promise<Array<PromiseResult<T>>>;
/**
 * Returns when first promise is resolved
 * @param array of promises.
 */
export declare function firstDone<T>(...promises: Array<() => Promise<T>>): Promise<T>;
export declare type FuncParams<T> = T extends (...args: infer T) => any ? T : undefined;
export declare function raise<T extends Function>(args: FuncParams<T>, ...funcs: T[]): void;
/**
 * Fetches content from given url. This used cors-anywhere API which enables cross-origin requests to anywhere.
 * @param url The url.
 */
export declare function tryFetch(url: string): Promise<Response>;
/**
 * Returns the keys for given enum object
 * @param target The enum.
 */
export declare function getEnumKeys(target: {
    [k: string]: any;
}): string[];
/**
 * Returns the string for given object
 * @param e Any object.
 */
export declare function str(e: any): string;
/**
 * Returns a sentence for the given camel cased string
 * @param input The input string.
 */
export declare function camelToSentence(input: string): string;
/**
 * Returns a boolean indicating whether the given value is of type string.
 * @param obj The value.
 */
export declare function isString(obj: any): boolean;
/**
 * Returns the array of values, or the default value if the value is undefined.
 * @param defaultValue The default value.
 * @param value The values.
 */
export declare function definedOr<T>(defaultVal: T, ...target: T[]): T[];
/**
 * Returns a boolean indicating whether the given property of object is defined or undefined.
 * @param value The values.
 */
export declare function defined(...target: any[]): boolean;
/**
 * Returns a boolean indicating whether the value is null or empty string.
 * @param value The string.
 */
export declare function isNullOrWhitespace(input: string): boolean;
/**
 * Returns a boolean indicating whether the value is null or undefined.
 * @param value The value.
 */
export declare function isNullOrUndefined(value: unknown): value is null | undefined;
/** Returns a random identifier. Likely (but not guaranteed) to be unique. */
export declare function randomIdentifier(): string;
/**
 * Calls a function repeatedly and returns the result as an array.
 * @param count The number of repeats.
 * @param f The function to call.
 */
export declare function repeat<T>(count: number, f: (index: number) => T): T[];
/**
 * Returns the value, or the default value if the value is undefined.
 * @param value The value.
 * @param defaultValue The default value.
 */
export declare function valueOrDefault<T>(value: T | undefined, defaultValue: T): T;
/**
 * Returns the value, or null if the value is falsy.
 * @param value The value.
 */
export declare function valueOrNull<T>(value: T): T | null;
/**
 * Ensures that a property name is the property of a type. Generates a compile time error, otherwise.
 * @param name The name of the property to be checked.
 */
export declare const propertyOf: <T>(name: keyof T) => keyof T;
/**
 * Mutex class to synchronize async operations.
 */
export declare class Mutex {
    private mutex;
    private lock;
    start: <T extends void | {}>(fn: (() => T) | (() => PromiseLike<T>)) => Promise<T>;
}
/**
 * A JS module to collect console's timer methods into a common place.
 */
export declare const ConsoleTimer: {
    start: (label: string, log?: boolean) => void;
    stopAndLog: (label: string, log?: boolean) => void;
};
export {};
