import { IDispatcher } from "./dispatcher";
/**
 * Event callback signature.
 * @param event The event identifier.
 * @param data The event data.
 */
export declare type EventCallback = (event: string, data: unknown) => void;
/**
 * Client information.
 */
export interface IClient {
    /** Client dispatcher. */
    dispatcher: IDispatcher;
    /** Client identifier. Set by the application. */
    identifier?: string;
    /** Client origin, or undefined if the client has not connected yet. */
    origin?: string;
}
/**
 * Generic connection handler.
 */
export interface IConnectHandler {
    /**
     * Handles a new connection.
     * @param client The connected client.
     */
    onConnect(client: IClient): void;
}
/**
 * Generic request handler.
 */
export interface IRequestHandler {
    /**
     * Handles an API request.
     * @param client The request source client.
     * @param api The requested API entry point.
     * @param args The request arguments.
     * @returns A promise that resolves into a result, or nothing if the handler cannot handle the request.
     */
    onRequest(client: IClient, api: string, args: unknown[]): Promise<unknown> | undefined;
}
/**
 * Connects to an external API.
 * @param target The target dispatcher or iframe.
 * @param onEvent The callback that receives the events dispatched from the external API.
 * @returns A promise that resolves to the external API.
 */
export declare function connect(target: Window | HTMLIFrameElement, onEvent?: EventCallback, timeout?: number): Promise<unknown>;
/**
 * Exposes the API to clients.
 * @param api The api to expose.
 */
export declare function expose(api: IConnectHandler | IRequestHandler | any): void;
/**
 * Pre-registers a client that is expected to connect.
 * @param client The client to register.
 */
export declare function preregister(client: IClient): IClient;
/**
 * Dispatches an event to all connected clients.
 * @param event The event identifier.
 * @param data The event data.
 * @param targetClient The client(optional), If specified then event will be sent to specified client otherwise event will be sent to all connected clients.
 */
export declare function dispatch(event: string, data?: unknown, targetClient?: IClient): void;
export declare function isApplicationEmbedded(): boolean;
