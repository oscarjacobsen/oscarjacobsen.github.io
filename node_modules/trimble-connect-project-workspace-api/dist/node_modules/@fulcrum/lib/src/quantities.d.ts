export declare type UnitSystem = "metric" | "imperial" | "custom";
export declare type UnitType = "Length" | "Area" | "Volume" | "Mass" | "Angle";
interface IUnit {
    readonly symbol: string;
}
interface ILengthUnit extends IUnit {
    readonly inMillimeters: number;
}
interface IAreaUnit extends IUnit {
    readonly inSquareMeters: number;
}
interface IVolumeUnit extends IUnit {
    readonly inCubicMeters: number;
}
interface IMassUnit extends IUnit {
    readonly inKilograms: number;
}
interface IAngleUnit extends IUnit {
    readonly inDegrees: number;
}
export declare type MetricLengthUnit = "mm" | "cm" | "m" | "km";
export declare const metricLengthUnits: Record<MetricLengthUnit, ILengthUnit>;
export declare type ImperialLengthUnit = "ft" | "in" | "yd" | "mi";
export declare const imperialLengthUnits: Record<ImperialLengthUnit, ILengthUnit>;
export declare type LengthUnit = MetricLengthUnit | ImperialLengthUnit;
export declare const lengthUnits: Record<LengthUnit, ILengthUnit>;
export declare type MetricAreaUnit = "mm2" | "cm2" | "m2" | "km2";
export declare const metricAreaUnits: Record<MetricAreaUnit, IAreaUnit>;
export declare type ImperialAreaUnit = "ft2" | "in2" | "yd2";
export declare const imperialAreaUnits: Record<ImperialAreaUnit, IAreaUnit>;
export declare type AreaUnit = MetricAreaUnit | ImperialAreaUnit;
export declare const areaUnits: Record<AreaUnit, IAreaUnit>;
export declare type MetricVolumeUnit = "mm3" | "cm3" | "m3" | "km3";
export declare const metricVolumeUnits: Record<MetricVolumeUnit, IVolumeUnit>;
export declare type ImperialVolumeUnit = "ft3" | "in3" | "yd3" | "l" | "gal";
export declare const imperialVolumeUnits: Record<ImperialVolumeUnit, IVolumeUnit>;
export declare type VolumeUnit = MetricVolumeUnit | ImperialVolumeUnit;
export declare const volumeUnits: Record<VolumeUnit, IVolumeUnit>;
export declare type MetricMassUnit = "mg" | "g" | "kg" | "t";
export declare const metricMassUnits: Record<MetricMassUnit, IMassUnit>;
export declare type ImperialMassUnit = "oz" | "lb" | "sh tn" | "ton";
export declare const imperialMassUnits: Record<ImperialMassUnit, IMassUnit>;
export declare type MassUnit = MetricMassUnit | ImperialMassUnit;
export declare const massUnits: Record<MassUnit, IMassUnit>;
export declare type AngleUnit = "rad" | "deg" | "deg-min-sec";
export declare const angleUnits: Record<AngleUnit, IAngleUnit>;
export declare type ImperialAngleUnit = AngleUnit;
export declare const imperialAngleUnits: Record<AngleUnit, IAngleUnit>;
export declare type MetricAngleUnit = AngleUnit;
export declare const metricAngleUnits: Record<AngleUnit, IAngleUnit>;
interface IUnitSystem {
    Length: Partial<Record<LengthUnit, ILengthUnit>>;
    Area: Partial<Record<AreaUnit, IAreaUnit>>;
    Volume: Partial<Record<VolumeUnit, IVolumeUnit>>;
    Mass: Partial<Record<MassUnit, IMassUnit>>;
    Angle: Partial<Record<AngleUnit, IAngleUnit>>;
}
export declare const unitSystems: Record<UnitSystem, IUnitSystem>;
/** Formatting settings. */
export interface IFormattingSettings {
    unitSystem: UnitSystem;
    lengthUnit: LengthUnit;
    lengthDecimals: number;
    lengthFormatting: "decimal" | "fractional";
    lengthFractions: number;
    lengthMeasurementUnit: LengthUnit;
    lengthMeasurementDecimals: number;
    lengthMeasurementFormatting: "decimal" | "fractional";
    lengthMeasurementFractions: number;
    areaUnit: AreaUnit;
    areaDecimals: number;
    volumeUnit: VolumeUnit;
    volumeDecimals: number;
    massUnit: MassUnit;
    massDecimals: number;
    angleUnit: AngleUnit;
    angleDecimals: number;
    genericDecimals: number;
}
/**
 * Sets the defualt values for formatting settings.
 */
export declare function setDefaultFormatSettings(): IFormattingSettings;
/**
 * Returns the loaded formatting settings.
 */
export declare function loadFormattingSettings(settingsKey?: string): IFormattingSettings;
/**
 * Saves the formatting settings.
 * @param settings The formatting settings.
 */
export declare function saveFormattingSettings(settings: IFormattingSettings, settingsKey?: string): void;
/**
 * Returns the length formatted as a string.
 * @param millimeters The length in millimeters.
 * @param unit The unit to use.
 * @param decimals The number of decimals to use.
 * @param showUnits The flag specifying if the formatting includes units.
 */
export declare function formatLength(millimeters: number, unit: LengthUnit, decimals?: number, showUnits?: boolean): string;
/**
 * Returns the length formatted as fractional feet and inches string.
 * @param millimeters The length in millimeters.
 * @param maximumDenominator The maximun denominator for fractional inches. Should be a power of two.
 */
export declare function formatLengthAsFractionalFeetAndInches(millimeters: number, maximumDenominator?: number): string;
/**
 * Returns the area formatted as a string.
 * @param squareMeters The area in square meters.
 * @param unit The unit to use.
 * @param decimals The number of decimals to use.
 */
export declare function formatArea(squareMeters: number, unit: AreaUnit, decimals?: number): string;
/**
 * Returns the volume formatted as a string.
 * @param cubicMeters The volume in cubic meters.
 * @param unit The unit to use.
 * @param decimals The number of decimals to use.
 */
export declare function formatVolume(cubicMeters: number, unit: VolumeUnit, decimals?: number): string;
/**
 * Returns the mass formatted as a string.
 * @param kilograms The mass in kilograms.
 * @param unit The unit to use.
 * @param decimals The number of decimals to use.
 */
export declare function formatMass(kilograms: number, unit: MassUnit, decimals?: number): string;
/**
 * Returns the angle formatted as a string.
 * @param degrees The angle in degrees.
 * @param unit The unit to use.
 * @param decimals The number of decimals to use.
 */
export declare function formatAngle(degrees: number, unit: AngleUnit, decimals?: number): string;
/**
 * Returns the number formatted as a string.
 * @param value The value.
 * @param decimals The number of decimals to use.
 */
export declare function formatNumber(value: number, decimals?: number): string;
/**
 * Returns a deg-min-sec as degrees.
 * If input string does not contain any delimiters (áµ’ ' ") or contains exactly three numbers,
 * numbers are used in order of importance. Otherwise found numbers with delimiters are used.
 * @param dms The angle in deg-min-sec.
 * @returns Angle in degrees.
 */
export declare function degMinSecToDegrees(dms: string): number;
/**
 * Returns a feet, inch or feetInch values as millimeters.
 * @param input The length in feet, inch or FeetInch format.
 * @returns Length in millimeters.
 */
export declare function parseFeetInchValue(input: string): number | undefined;
export {};
