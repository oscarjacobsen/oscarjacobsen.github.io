import { NumberFormat } from "./parse-number";
export declare enum FeetInchesType {
    Feet = 0,
    Inches = 1,
    FeetInches = 2
}
/**
 * \@fulcrum/lib already contains the `parseFeetInchValue()` function, but it is somewhat problematic as it
 * always assumes feet-inch units even if we don't mean it. For example, if we input `1 1/2"` to that
 * function, it will blindy assume that we meant `1 ft 0.5 in`, even though we clearly meant `1.5 in`.
 * Another problem with it is that the implementation is just not good and it fails even in some simple cases, e.g.
 * `parseFeetInchValue("1") === undefined`.
 *
 * This function parses a feet, inches or feet-inches string. Supports integers, decimals, fractions,
 * mixed fractions and scientific notation with or without units.
 *
 * This function accepts a second parameter that can be used to force the unit, even if the value is ambiguous. E.g.:
 * - `1 1/2` `FeetInchesType.Feet` -> interpreted as 1.5 feet
 * - `1 1/2` `FeetInchesType.Inches` -> interpreted as 1.5 inches
 * - `1 1/2` `FeetInchesType.FeetInches` -> interpreted as 1 foot 0.5 inches
 * - `1 1/2'` `FeetInchesType.Feet` -> interpreted as 1.5 feet
 * - `1 1/2'` `FeetInchesType.Inches` -> error
 * - `1 1/2'` `FeetInchesType.FeetInches` -> interpreted as 1.5 feet
 * - `1 1/2"` `FeetInchesType.Feet` -> error
 * - `1 1/2"` `FeetInchesType.Inches` -> interpreted as 1.5 inches
 * - `1 1/2"` `FeetInchesType.FeetInches` -> interpreted as 1.5 inches
 *
 * @param value The feet, inches or feet-inches value to parse
 * @param type Unit for resolving ambiguities
 * @param format Optional format restrictions. See `parseNumber()` documentation
 * @returns The length in millimeters
 */
export declare function feetInchesToMillimeters(value: string, type: FeetInchesType, format?: NumberFormat): number;
