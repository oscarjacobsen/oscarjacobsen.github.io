import { IErrorHandler } from "./IErrorHandler";
declare type NotPromise<T> = T extends Promise<any> ? never : T;
/** Handle errors thrown from a function by passing them to an event handler
 * Usage: private onOk = unsafe(() => { <ok-handler-code>  }, () => this.eventHandler); <button onClick={this.onOk} />
 * @param {function} func - The event handler function
 * @param {function} handler - The error handler object
 * @param {boolean} [swallow = false] - Swallow the exception instead of rethrowing it
 * @param {R} [defVal = undefined] - Return value if exception is not rethrown
 * @returns {R} - The return value of the wrapped function or the specified default value if the exception is swallowed
 */
export declare function unsafe<A extends any[], R>(func: (...args: A) => NotPromise<R>, handler: () => IErrorHandler, swallow: true, defVal: R): (...args: A) => R;
export declare function unsafe<A extends any[], R>(func: (...args: A) => NotPromise<R>, handler: () => IErrorHandler, swallow: true, defVal?: R): (...args: A) => R extends void ? R : R | undefined;
export declare function unsafe<A extends any[], R>(func: (...args: A) => NotPromise<R>, handler: () => IErrorHandler, swallow?: false): (...args: A) => R;
/** Handle errors thrown from an async function by passing them to an event handler
 * Usage: private loadData = unsafeAsync(async () => { <data-loader-code>  }, () => this.eventHandler); <button onClick={this.loadData} />
 * @param {function} func - The event handler function
 * @param {function} handler - The error handler object
 * @param {boolean} [swallow = false] - Swallow the exception instead of rethrowing it
 * @param {R} [defVal = undefined] - Return value if exception is not rethrown
 * @returns {Promise<R>} - The return value of the wrapped function or the specified default value if the exception is swallowed
 */
export declare function unsafeAsync<A extends any[], R>(func: (...args: A) => Promise<R>, handler: () => IErrorHandler, swallow: true, defVal: R): (...args: A) => Promise<R>;
export declare function unsafeAsync<A extends any[], R>(func: (...args: A) => Promise<R>, handler: () => IErrorHandler, swallow: true, defVal?: R): (...args: A) => R extends void ? Promise<R> : Promise<R | undefined>;
export declare function unsafeAsync<A extends any[], R>(func: (...args: A) => Promise<R>, handler: () => IErrorHandler, swallow?: false): (...args: A) => Promise<R>;
export {};
