'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _get = require('babel-runtime/helpers/get')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

_Object$defineProperty(exports, '__esModule', {
  value: true
});

var _flummox = require('flummox');

var _utilQl = require('./util/ql');

var Collection = (function () {
  function Collection(store, name) {
    _classCallCheck(this, Collection);

    this.store = store;
    this.name = name;
  }

  _createClass(Collection, [{
    key: 'get',
    value: function get(id) {
      var _this = this;

      return this.toArray().filter(function (item) {
        return _this.store.rele.idGetter(item) === id;
      }).shift();
    }
  }, {
    key: 'filter',
    value: function filter(fn) {
      return this.toArray().filter(fn);
    }
  }, {
    key: 'toArray',
    value: function toArray() {
      var _this2 = this;

      var getType = this.store.rele.typeGetter;
      var getId = this.store.rele.idGetter;
      var merge = this.store.rele.merger;

      var saved = _Object$keys(this.store.resources[this.name] || {}).map(function (id) {
        return _this2.store.resources[_this2.name][id];
      });

      var unsaved = this.store.createRequests.reduce(function (acc, _ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var requestId = _ref2[0];
        var items = _ref2[1];

        return acc.concat(items.filter(function (item) {
          return getType(item) === _this2.name;
        }));
      }, []);

      var changes = this.store.updateRequests.reduce(function (acc, _ref3) {
        var _ref32 = _slicedToArray(_ref3, 2);

        var requestId = _ref32[0];
        var items = _ref32[1];

        return acc.concat(items);
      }, []);

      var deleted = this.store.deleteRequests.reduce(function (acc, _ref4) {
        var _ref42 = _slicedToArray(_ref4, 2);

        var requestId = _ref42[0];
        var items = _ref42[1];

        return acc.concat(items);
      }, []);

      var items = saved.concat(unsaved).filter(function (item) {
        return !deleted.some(function (d) {
          return getId(d) === getId(item) && getType(d) === getType(item);
        });
      }).map(function (item) {
        var itemChanges = changes.filter(function (c) {
          return getId(c) === getId(item) && getType(c) === getType(item);
        });

        return itemChanges.reduce(merge, item);
      });

      return items;
    }
  }]);

  return Collection;
})();

var Collections = (function () {
  function Collections(store) {
    _classCallCheck(this, Collections);

    this.store = store;
  }

  _createClass(Collections, [{
    key: 'getResource',
    value: function getResource(type, id) {
      return this.get(type).get(id);
    }
  }, {
    key: 'get',
    value: function get(id) {
      return new Collection(this.store, id);
    }
  }]);

  return Collections;
})();

var ReleStore = (function (_Store) {
  function ReleStore(rele) {
    _classCallCheck(this, ReleStore);

    _get(Object.getPrototypeOf(ReleStore.prototype), 'constructor', this).call(this);

    var releActions = rele.getActions('rele');

    this.registerAsync(releActions.request, null, this.handleResponses, this.handleRequestError);
    this.register(releActions.mergeResponse, this.handleResponses);
    this.register(releActions.startOptimisticRequest, this.handleStartOptimisticRequest);
    this.register(releActions.endOptimisticRequest, this.handleEndOptimisticRequest);
    this.register(releActions.cancelOptimisticRequest, this.handleCancelOptimisticRequest);

    this.rele = rele;
    this.resources = {};
    this.requests = [];
    this.relationshipAdditions = [];
    this.relationshipDeletions = [];
    this.createRequests = [];
    this.updateRequests = [];
    this.deleteRequests = [];
    this.collections = new Collections(this);
  }

  _inherits(ReleStore, _Store);

  _createClass(ReleStore, [{
    key: 'handleStartOptimisticRequest',
    value: function handleStartOptimisticRequest(_ref5) {
      var requestId = _ref5.requestId;
      var addToRelationships = _ref5.addToRelationships;
      var add = _ref5.add;
      var merge = _ref5.merge;
      var remove = _ref5.remove;

      this.requests.push(requestId);

      var getType = this.rele.typeGetter;
      var getId = this.rele.idGetter;
      var relationshipDeletions = remove.map(function (item) {
        return [getType(item), getId(item)];
      });

      if (addToRelationships.length > 0) this.relationshipAdditions.push([requestId, addToRelationships]);
      if (relationshipDeletions.length > 0) this.relationshipDeletions.push([requestId, relationshipDeletions]);
      if (add.length > 0) this.createRequests.push([requestId, add]);
      if (merge.length > 0) this.updateRequests.push([requestId, merge]);
      if (remove.length > 0) this.deleteRequests.push([requestId, remove]);

      this.forceUpdate();
    }
  }, {
    key: 'handleEndOptimisticRequest',
    value: function handleEndOptimisticRequest(_ref6) {
      var _this3 = this;

      var requestId = _ref6.requestId;
      var add = _ref6.add;
      var merge = _ref6.merge;
      var remove = _ref6.remove;

      this.requests = this.requests.filter(function (id) {
        return id !== requestId;
      });

      this.relationshipAdditions = this.relationshipAdditions.filter(function (_ref7) {
        var _ref72 = _slicedToArray(_ref7, 1);

        var id = _ref72[0];
        return id !== requestId;
      });
      this.relationshipDeletions = this.relationshipDeletions.filter(function (_ref8) {
        var _ref82 = _slicedToArray(_ref8, 1);

        var id = _ref82[0];
        return id !== requestId;
      });
      this.createRequests = this.createRequests.filter(function (_ref9) {
        var _ref92 = _slicedToArray(_ref9, 1);

        var id = _ref92[0];
        return id !== requestId;
      });
      this.updateRequests = this.updateRequests.filter(function (_ref10) {
        var _ref102 = _slicedToArray(_ref10, 1);

        var id = _ref102[0];
        return id !== requestId;
      });
      this.deleteRequests = this.deleteRequests.filter(function (_ref11) {
        var _ref112 = _slicedToArray(_ref11, 1);

        var id = _ref112[0];
        return id !== requestId;
      });

      if (add.length > 0) add.forEach(function (item) {
        return _this3.mergeResource(item);
      });
      if (merge.length > 0) merge.forEach(function (item) {
        return _this3.mergeResource(item);
      });
      if (remove.length > 0) {
        (function () {
          var getType = _this3.rele.typeGetter;
          var getId = _this3.rele.idGetter;

          remove.forEach(function (item) {
            delete _this3.resources[getType(item)][getId(item)];
          });
        })();
      }

      this.forceUpdate();
    }
  }, {
    key: 'handleCancelOptimisticRequest',
    value: function handleCancelOptimisticRequest(_ref12) {
      var requestId = _ref12.requestId;

      this.handleEndOptimisticRequest({ requestId: requestId, add: [], merge: [], remove: [] });
    }
  }, {
    key: 'mergeResource',
    value: function mergeResource(resource) {
      var type = this.rele.typeGetter(resource);
      var id = this.rele.idGetter(resource);

      if (!this.resources[type]) {
        this.resources[type] = {};
      }

      if (this.resources[type][id]) {
        this.resources[type][id] = this.rele.merger(this.resources[type][id], resource);
      } else {
        this.resources[type][id] = resource;
      }
    }
  }, {
    key: 'mergeResponse',
    value: function mergeResponse(response) {
      this.rele.getResourcesFromResponse(response).map(this.mergeResource.bind(this));
    }
  }, {
    key: 'handleResponses',
    value: function handleResponses(responses) {
      if (!Array.isArray(responses)) {
        responses = [responses];
      }

      responses.forEach(this.mergeResponse.bind(this));

      this.forceUpdate();
    }
  }, {
    key: 'handleRequestError',
    value: function handleRequestError(error) {
      console.error(error.stack);
    }
  }, {
    key: 'getOptimisticRequestsCount',
    value: function getOptimisticRequestsCount() {
      return this.requests.length;
    }
  }, {
    key: 'get',
    value: function get(id) {
      return this.collections.get(id);
    }
  }, {
    key: 'getResource',
    value: function getResource(type, id) {
      return this.collections.getResource(type, id);
    }
  }, {
    key: 'fulfill',
    value: function fulfill(query) {
      var _this4 = this;

      if (query.type !== 'call') {
        throw new Error('Invalid query provided to rele fulfill');
      }

      var get = this.rele.getter;
      var getType = this.rele.typeGetter;
      var getId = this.rele.idGetter;
      var getRelationship = this.rele.relationshipGetter;
      var relationshipAdditions = this.relationshipAdditions.reduce(function (acc, _ref13) {
        var _ref132 = _slicedToArray(_ref13, 2);

        var requestId = _ref132[0];
        var relationshipAdditions = _ref132[1];

        return acc.concat(relationshipAdditions);
      }, []);
      var relationshipDeletions = this.relationshipDeletions.reduce(function (acc, _ref14) {
        var _ref142 = _slicedToArray(_ref14, 2);

        var requestId = _ref142[0];
        var relationshipDeletions = _ref142[1];

        return acc.concat(relationshipDeletions);
      }, []);
      var fulfilled = true;

      var recursiveCall = function recursiveCall(call, parent) {
        var methodName = call.name;
        var methodArgs = (0, _utilQl.collectArgs)(call.args);

        var fields = (0, _utilQl.collectFields)(call['class']);
        var include = (0, _utilQl.collectInclude)(call['class']);

        var resource = _this4.rele.getActions('' + methodName + 'Rele').constructor.filter(methodArgs, parent, _this4.collections, _this4.rele);

        if (resource instanceof Collection) {
          resource = resource.toArray();
        }

        if (!resource) {
          fulfilled = false;
          return null;
        } else if (Array.isArray(resource)) {
          return resource.map(function (resource) {
            return recursiveClass(call['class'], fields, resource);
          });
        } else {
          return recursiveClass(call['class'], fields, resource);
        }
      };

      var recursiveClass = function recursiveClass(cls, fields, resource) {
        var result = {};

        fields[cls.name].forEach(function (field) {
          result[field] = get(resource, field);
        });

        cls.block.includes.forEach(function (include) {
          var relationship = getRelationship(resource, include.name);

          var readRelationship = function readRelationship(relationship) {
            if (relationship.type !== include['class'].name) {
              throw new Error('Unexpected relationship type "' + relationship.type + '" expected "' + include['class'].name + '"');
            }

            var resource = _this4.collections.get(relationship.type).get(relationship.id);

            if (!resource) {
              fulfilled = false;
              return null;
            }

            return recursiveClass(include['class'], fields, resource);
          };

          var additions = relationshipAdditions.filter(function (_ref15) {
            var _ref152 = _slicedToArray(_ref15, 3);

            var type = _ref152[0];
            var id = _ref152[1];
            var name = _ref152[2];
            return type === getType(resource) && id === getId(resource) && name === include.name;
          }).map(function (_ref16) {
            var _ref162 = _slicedToArray(_ref16, 4);

            var type = _ref162[0];
            var id = _ref162[1];
            var name = _ref162[2];
            var item = _ref162[3];
            return item;
          });
          var deletions = relationshipDeletions.filter(function (_ref17) {
            var _ref172 = _slicedToArray(_ref17, 1);

            var type = _ref172[0];
            return type === include['class'].name;
          }).map(function (_ref18) {
            var _ref182 = _slicedToArray(_ref18, 2);

            var type = _ref182[0];
            var id = _ref182[1];
            return id;
          });

          if (Array.isArray(relationship)) {
            result[include.name] = relationship.filter(function (relationship) {
              return !deletions.some(function (id) {
                return id === relationship.id;
              });
            }).map(readRelationship).concat(additions.map(function (addition) {
              return recursiveClass(include['class'], fields, addition);
            }));
          } else {
            if (additions.length > 0) {
              result[include.name] = recursiveClass(include['class'], fields, additions[additions.length - 1]);
            } else if (deletions.some(function (id) {
              return id === relationship.id;
            })) {
              result[include.name] = null;
            } else {
              result[include.name] = relationship && readRelationship(relationship) || null;
            }
          }
        });

        cls.block.calls.forEach(function (call) {
          result[call.name] = recursiveCall(call, resource);
        });

        return result;
      };

      var result = recursiveCall(query);
      return fulfilled ? this.rele.wrapper(result) : null;
    }
  }]);

  return ReleStore;
})(_flummox.Store);

exports['default'] = ReleStore;
module.exports = exports['default'];