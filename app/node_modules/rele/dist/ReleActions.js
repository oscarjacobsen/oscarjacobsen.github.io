'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _get = require('babel-runtime/helpers/get')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

_Object$defineProperty(exports, '__esModule', {
  value: true
});

var _flummox = require('flummox');

var _utilQl = require('./util/ql');

var ReleActions = (function (_Actions) {
  function ReleActions(rele) {
    _classCallCheck(this, ReleActions);

    _get(Object.getPrototypeOf(ReleActions.prototype), 'constructor', this).call(this);

    this.rele = rele;
  }

  _inherits(ReleActions, _Actions);

  _createClass(ReleActions, [{
    key: 'request',
    value: function request(query) {
      var responses, recursive;
      return _regeneratorRuntime.async(function request$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(query.type !== 'call')) {
              context$2$0.next = 2;
              break;
            }

            throw new Error('Invalid query provided to rele request');

          case 2:
            responses = [];

            recursive = function recursive(call, parent) {
              var methodName, methodArgs, fields, include, response, checkResponseData;
              return _regeneratorRuntime.async(function recursive$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    checkResponseData = function checkResponseData(data) {
                      if (data.type !== call['class'].name) {
                        throw new Error('Rele method "' + methodName + '" should return "' + call['class'].name + '" got "' + data.type + '"');
                      }
                    };

                    methodName = call.name;
                    methodArgs = (0, _utilQl.collectArgs)(call.args);
                    fields = (0, _utilQl.collectFields)(call['class']);
                    include = (0, _utilQl.collectInclude)(call['class']);
                    context$3$0.next = 7;
                    return this.rele.getActions('' + methodName + 'Rele').fetch(methodArgs, fields, include, parent, this.rele);

                  case 7:
                    response = context$3$0.sent;

                    responses.push(response);

                    if (response) {
                      if (Array.isArray(response.data)) {
                        response.data.map(checkResponseData);
                      } else if (response.data) {
                        checkResponseData(response.data);
                      }
                    }

                    context$3$0.next = 12;
                    return _Promise.all(call['class'].block.calls.map(function (c) {
                      return recursive(c, response && response.data);
                    }));

                  case 12:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            };

            context$2$0.next = 6;
            return recursive(query);

          case 6:
            return context$2$0.abrupt('return', responses);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'mergeResponse',
    value: function mergeResponse(response) {
      return response;
    }
  }, {
    key: 'startOptimisticRequest',
    value: function startOptimisticRequest(requestId) {
      var changes = arguments[1] === undefined ? {} : arguments[1];
      var _changes$addToRelationships = changes.addToRelationships;
      var addToRelationships = _changes$addToRelationships === undefined ? [] : _changes$addToRelationships;
      var _changes$add = changes.add;
      var add = _changes$add === undefined ? [] : _changes$add;
      var _changes$merge = changes.merge;
      var merge = _changes$merge === undefined ? [] : _changes$merge;
      var _changes$remove = changes.remove;
      var remove = _changes$remove === undefined ? [] : _changes$remove;

      if (!Array.isArray(add)) add = [add];
      if (!Array.isArray(merge)) merge = [merge];
      if (!Array.isArray(remove)) remove = [remove];

      return { requestId: requestId, addToRelationships: addToRelationships, add: add, merge: merge, remove: remove };
    }
  }, {
    key: 'endOptimisticRequest',
    value: function endOptimisticRequest(requestId) {
      var changes = arguments[1] === undefined ? {} : arguments[1];
      var _changes$add2 = changes.add;
      var add = _changes$add2 === undefined ? [] : _changes$add2;
      var _changes$merge2 = changes.merge;
      var merge = _changes$merge2 === undefined ? [] : _changes$merge2;
      var _changes$remove2 = changes.remove;
      var remove = _changes$remove2 === undefined ? [] : _changes$remove2;

      if (!Array.isArray(add)) add = [add];
      if (!Array.isArray(merge)) merge = [merge];
      if (!Array.isArray(remove)) remove = [remove];

      return { requestId: requestId, add: add, merge: merge, remove: remove };
    }
  }, {
    key: 'cancelOptimisticRequest',
    value: function cancelOptimisticRequest(requestId) {
      return { requestId: requestId };
    }
  }]);

  return ReleActions;
})(_flummox.Actions);

exports['default'] = ReleActions;
module.exports = exports['default'];