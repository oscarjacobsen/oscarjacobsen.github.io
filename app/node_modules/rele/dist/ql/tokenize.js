'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

_Object$defineProperty(exports, '__esModule', {
  value: true
});

exports['default'] = tokenize;
var marked0$0 = [reader].map(_regeneratorRuntime.mark);
function isWordChar(char) {
  if (typeof char !== 'string') return false;

  if (char === '_') return true;

  var code = char.toLowerCase().charCodeAt(0);

  return code >= 97 && code <= 122;
}

function reader(parts) {
  var i, part, j;
  return _regeneratorRuntime.wrap(function reader$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        i = 0;

      case 1:
        if (!(i < parts.length)) {
          context$1$0.next = 16;
          break;
        }

        part = parts[i];
        j = 0;

      case 4:
        if (!(j < part.length)) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 7;
        return part[j];

      case 7:
        j++;
        context$1$0.next = 4;
        break;

      case 10:
        if (!(i < parts.length - 1)) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 13;
        return BREAK;

      case 13:
        i++;
        context$1$0.next = 1;
        break;

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[0], this);
}

var BREAK = {};

function tokenize(parts) {
  var tokens = [];
  var r = reader(parts);
  var char = undefined;

  function readNextChar() {
    var _r$next = r.next();

    var done = _r$next.done;
    var value = _r$next.value;

    char = done ? null : value;
  }

  function readWord() {
    var token = ['word', char];

    while (true) {
      readNextChar();
      if (!isWordChar(char)) break;
      token[1] += char;
    }

    return token;
  }

  readNextChar();
  while (true) {
    if (char === ' ' || char === '\n') {
      readNextChar();
      continue;
    } else if (isWordChar(char)) {
      tokens.push(readWord());
    } else if (char === BREAK) {
      tokens.push(['BREAK']);
      readNextChar();
    } else if (char === '{' || char === '}' || char === ',' || char === '(' || char === ')' || char === ':' || char === '<' || char === '>') {
      tokens.push([char]);
      readNextChar();
    } else if (!char) {
      break;
    } else {
      throw new Error('Unknown token "' + char + '" in query "' + parts.join('').trim() + '"');
    }
  }

  return tokens;
}

module.exports = exports['default'];