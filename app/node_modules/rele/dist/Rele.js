'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _get = require('babel-runtime/helpers/get')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

_Object$defineProperty(exports, '__esModule', {
  value: true
});

var _flummox = require('flummox');

var _ReleActions = require('./ReleActions');

var _ReleActions2 = _interopRequireDefault(_ReleActions);

var _ReleStore = require('./ReleStore');

var _ReleStore2 = _interopRequireDefault(_ReleStore);

var _utilUniqueRequestId = require('./util/uniqueRequestId');

var _utilUniqueRequestId2 = _interopRequireDefault(_utilUniqueRequestId);

var _storageJsonApi = require('./storage/jsonApi');

var _storageJsonApi2 = _interopRequireDefault(_storageJsonApi);

var Rele = (function (_Flummox) {
  function Rele() {
    var _this = this;

    var options = arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Rele);

    _get(Object.getPrototypeOf(Rele.prototype), 'constructor', this).call(this);

    var releActions = options.releActions || {};
    _Object$keys(releActions).forEach(function (key) {
      _this.createReleActions(key, releActions[key], _this);
    });

    var storage = options.storage || _storageJsonApi2['default'];
    this.wrapper = storage.wrapper;
    this.merger = storage.merger;
    this.getter = storage.getter;
    this.typeGetter = storage.typeGetter;
    this.idGetter = storage.idGetter;
    this.relationshipGetter = storage.relationshipGetter;
    this.getResourcesFromResponse = storage.getResourcesFromResponse;

    this.watchers = {};

    this.createActions('rele', _ReleActions2['default'], this);
    this.createStore('rele', _ReleStore2['default'], this);
  }

  _inherits(Rele, _Flummox);

  _createClass(Rele, [{
    key: 'observeStore',
    value: function observeStore(key, getter) {
      var _this2 = this;

      var store = this.getStore(key);

      return {
        subscribe: function subscribe(callback) {
          var watcher = function watcher() {
            callback(getter(store));
          };

          _this2.watchers[key].push(watcher);
          watcher();

          return {
            dispose: function dispose() {
              _this2.watchers[key] = _this2.watchers[key].filter(function (w) {
                return w !== watcher;
              });
            }
          };
        }
      };
    }
  }, {
    key: 'releRequest',
    value: function releRequest(query) {
      this.getActions('rele').request(query);
    }
  }, {
    key: 'fulfillReleQuery',
    value: function fulfillReleQuery(query) {
      return this.observeStore('rele', function (store) {
        return store.fulfill(query);
      });
    }
  }, {
    key: 'createReleActions',
    value: function createReleActions(key, cls) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      this.createActions.apply(this, ['' + key + 'Rele', cls].concat(args));
    }
  }, {
    key: 'mergeResponse',
    value: function mergeResponse(response) {
      this.getActions('rele').mergeResponse(response);
    }
  }, {
    key: 'createStore',
    value: function createStore(key, cls) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      var _get2,
          _this3 = this;

      (_get2 = _get(Object.getPrototypeOf(Rele.prototype), 'createStore', this)).call.apply(_get2, [this, key, cls].concat(args));

      this.watchers[key] = [];

      this.getStore(key).on('change', function () {
        _this3.watchers[key].forEach(function (watcher) {
          return watcher();
        });
      });
    }
  }, {
    key: 'getResource',
    value: function getResource(type, id) {
      return this.getStore('rele').getResource(type, id);
    }
  }, {
    key: 'getOptimisticRequestsCount',
    value: function getOptimisticRequestsCount() {
      return this.getStore('rele').getOptimisticRequestsCount();
    }
  }, {
    key: 'startOptimisticRequest',
    value: function startOptimisticRequest(changes) {
      var _this4 = this;

      var requestId = (0, _utilUniqueRequestId2['default'])();

      this.getActions('rele').startOptimisticRequest(requestId, changes);

      return {
        requestId: requestId,
        commit: function commit(changes) {
          _this4.getActions('rele').endOptimisticRequest(requestId, changes);
        },
        cancel: function cancel() {
          _this4.getActions('rele').cancelOptimisticRequest(requestId);
        }
      };
    }
  }]);

  return Rele;
})(_flummox.Flummox);

exports['default'] = Rele;
module.exports = exports['default'];